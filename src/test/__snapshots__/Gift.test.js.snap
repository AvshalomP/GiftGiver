// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Gift should render properly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Gift
    gift={
      Object {
        "id": 1,
      }
    }
    handleRemove={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <form
          className="formContainer"
        >
          <label
            htmlFor="person"
          >
            Person
          </label>
          <input
            className="input-person"
            name="person"
            onChange={[Function]}
            type="text"
          />
          <label
            htmlFor="present"
          >
            Present
          </label>
          <input
            className="input-present"
            name="present"
            onChange={[Function]}
            type="text"
          />
        </form>,
        <button
          className="btn"
          id="removeBtn"
          onClick={[Function]}
        >
          Remove Gift
        </button>,
      ],
      "className": "container",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <label
              htmlFor="person"
            >
              Person
            </label>,
            <input
              className="input-person"
              name="person"
              onChange={[Function]}
              type="text"
            />,
            <label
              htmlFor="present"
            >
              Present
            </label>,
            <input
              className="input-present"
              name="present"
              onChange={[Function]}
              type="text"
            />,
          ],
          "className": "formContainer",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Person",
              "htmlFor": "person",
            },
            "ref": null,
            "rendered": "Person",
            "type": "label",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "input-person",
              "name": "person",
              "onChange": [Function],
              "type": "text",
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Present",
              "htmlFor": "present",
            },
            "ref": null,
            "rendered": "Present",
            "type": "label",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "input-present",
              "name": "present",
              "onChange": [Function],
              "type": "text",
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
        ],
        "type": "form",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Remove Gift",
          "className": "btn",
          "id": "removeBtn",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": "Remove Gift",
        "type": "button",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <form
            className="formContainer"
          >
            <label
              htmlFor="person"
            >
              Person
            </label>
            <input
              className="input-person"
              name="person"
              onChange={[Function]}
              type="text"
            />
            <label
              htmlFor="present"
            >
              Present
            </label>
            <input
              className="input-present"
              name="present"
              onChange={[Function]}
              type="text"
            />
          </form>,
          <button
            className="btn"
            id="removeBtn"
            onClick={[Function]}
          >
            Remove Gift
          </button>,
        ],
        "className": "container",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <label
                htmlFor="person"
              >
                Person
              </label>,
              <input
                className="input-person"
                name="person"
                onChange={[Function]}
                type="text"
              />,
              <label
                htmlFor="present"
              >
                Present
              </label>,
              <input
                className="input-present"
                name="present"
                onChange={[Function]}
                type="text"
              />,
            ],
            "className": "formContainer",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Person",
                "htmlFor": "person",
              },
              "ref": null,
              "rendered": "Person",
              "type": "label",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "input-person",
                "name": "person",
                "onChange": [Function],
                "type": "text",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Present",
                "htmlFor": "present",
              },
              "ref": null,
              "rendered": "Present",
              "type": "label",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "input-present",
                "name": "present",
                "onChange": [Function],
                "type": "text",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
          ],
          "type": "form",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Remove Gift",
            "className": "btn",
            "id": "removeBtn",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": "Remove Gift",
          "type": "button",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
